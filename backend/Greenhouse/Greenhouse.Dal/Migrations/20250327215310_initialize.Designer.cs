// <auto-generated />
using System;
using Greenhouse.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Greenhouse.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250327215310_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualCompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EmploeeId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventStatus")
                        .HasColumnType("integer");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<long>("GreenhouseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmploeeId");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEventResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("ActualAmount")
                        .HasColumnType("double precision");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlannedAmount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventResources", t =>
                        {
                            t.HasCheckConstraint("CK_EventResources_ActualAmount", "\"ActualAmount\" >= 0");

                            t.HasCheckConstraint("CK_EventResources_PlannedAmount", "\"PlannedAmount\" >= 0");
                        });
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.CropType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GreenhouseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId")
                        .IsUnique();

                    b.ToTable("CropTypes");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.GreenhouseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Greenhouses", t =>
                        {
                            t.HasCheckConstraint("CK_Greenhouses_Area", "\"Area\" > 0");
                        });
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgricultiralEventResourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgricultiralEventResourceId")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEvent", b =>
                {
                    b.HasOne("Greenhouse.Domain.Entities.Employee", "Employee")
                        .WithMany("Events")
                        .HasForeignKey("EmploeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Greenhouse.Domain.Entities.GreenhouseEntity", "Greenhouse")
                        .WithMany("Events")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEventResource", b =>
                {
                    b.HasOne("Greenhouse.Domain.Entities.AgricultiralEvent", "Event")
                        .WithMany("Resources")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.CropType", b =>
                {
                    b.HasOne("Greenhouse.Domain.Entities.GreenhouseEntity", "Greenhouse")
                        .WithOne("CropType")
                        .HasForeignKey("Greenhouse.Domain.Entities.CropType", "GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.Resource", b =>
                {
                    b.HasOne("Greenhouse.Domain.Entities.AgricultiralEventResource", "AgricultiralEventResource")
                        .WithOne("Resource")
                        .HasForeignKey("Greenhouse.Domain.Entities.Resource", "AgricultiralEventResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgricultiralEventResource");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEvent", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.AgricultiralEventResource", b =>
                {
                    b.Navigation("Resource")
                        .IsRequired();
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Greenhouse.Domain.Entities.GreenhouseEntity", b =>
                {
                    b.Navigation("CropType")
                        .IsRequired();

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
